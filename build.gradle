buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.10"
  }
}

ext {
  vers = [
    tfs: file("VERSION").text.trim(),
    jvm: "8",
    grpc: "1.24.0",
    proto: "3.10.0"]
  dist = [
    build: "release",
    name: [
      _: project.name,
      title: project.name.tokenize("-").collect{it.capitalize()}.join(" "),
      camel: project.name.tokenize("-").collect{it.capitalize()}.join(""),
      snake: project.name.replaceAll("-", "_")],
    version: [
      _: vers.tfs,
      grpc: [
        _: vers.grpc,
        dotnet: vers.grpc.tokenize(".").withIndex().collect{ v, i ->
                  i == 0 ? ((v as int) + 1) : v
                }.join(".")],
      proto: vers.proto],
    license: "Apache-2.0",
    author: [
      _: "Figroc Chen <figroc@gmail.com>",
      id: "figroc",
      name: "Figroc Chen",
      email: "figroc@gmail.com"],
    url: "https://github.com/figroc/tensorflow-serving-client",
    description: "A prebuilt tensorflow serving client from the tensorflow serving proto files"]
}

static def buildEnviron(options, prefix="TFSCLIENT") {
  return options.collectEntries([:]) { k, v ->
    def key = k == "_" ? prefix : "${prefix}_${k.toUpperCase()}".toString()
    return (v instanceof Map) ? buildEnviron(v, key) : [(key): v]
  }
}

static def pathOfExecutable(name) {
  def path = "which ${name}".execute()
  path.waitFor()
  return path.in.text.trim()
}

version = "${vers.tfs}"

apply plugin: "java-library"

sourceCompatibility = "1.${vers.jvm}"
targetCompatibility = "1.${vers.jvm}"

repositories {
  mavenCentral()
}

apply from: "gradle/grpc.gradle"
apply from: "gradle/cmake.gradle"
apply from: "gradle/java.gradle"
apply from: "gradle/wheel.gradle"
apply from: "gradle/node.gradle"
apply from: "gradle/golang.gradle"
apply from: "gradle/mono.gradle"
apply from: "gradle/rust.gradle"

task buildAll {
  dependsOn "cmake"
  dependsOn "build"
  dependsOn "wheel"
  dependsOn "node"
  dependsOn "golang"
  dependsOn "mono"
  dependsOn "rust"
}

apply from: "gradle/ossrh.gradle"

task publishAll {
  dependsOn "publish"
  dependsOn "twine"
  dependsOn "npmjs"
  dependsOn "nuget"
  dependsOn "crate"
}
